openapi: 3.0.3
info:
   version: 1.0.0
   title: MajiCode Budget Application - OpenAPI 3.0
   description: "APIs used to populate and run the Majicode Budget App. \n\nThis is created using the OpenAPI 3.0 specification.\
      \  You can find out more about Swagger at [http://swagger.io](http://swagger.io).\n"
   contact:
      name: Michael Judd
      email: judd.michael@gmail.com
   license:
      name: MIT
servers:
   -  url: http://localhost:8081/api
tags:
   - name: incomes
     description: API for interacting with the incomes
   - name: groups
     description: API for interacting with groups
paths:
   /incomes:
      get:
         tags:
            - incomes
         summary: List all Incomes
         description: Retrieves the full list of all the Incomes in the budget app
         operationId: listIncomes
         parameters:
            -  $ref: '#/components/parameters/limitParam'
         responses:
            200:
               description: A list of Incomes
               content:
                  application/json:
                     schema:
                        type: array
                        items:
                           $ref: '#/components/schemas/Income'
            422:
               $ref: '#/components/responses/InvalidData'
            default:
               $ref: '#/components/responses/UnexpectedError'
      post:
         tags:
            - incomes
         summary: Add a new income to the budget
         description: Adds a new Income for a specific amount on a given date
         operationId: addIncome
         requestBody:
            description: Income object that needs to be added to the budget
            required: true
            content:
               application/json:
                  schema:
                     $ref: '#/components/schemas/Income'
         responses:
            201:
               description: Expected response to a valid request
               content:
                  application/json:
                     schema:
                        $ref: '#/components/schemas/Income'
            422:
               $ref: '#/components/responses/InvalidData'
            default:
               $ref: '#/components/responses/UnexpectedError'
      put:
         tags:
            - incomes
         summary: Update an existing Income
         description: Update an existing Income
         operationId: updateIncome
         requestBody:
            description: Income object that needs to be updated in the budget
            required: true
            content:
               application/json:
                  schema:
                     $ref: '#/components/schemas/Income'
         responses:
            200:
               description: Successfully updated Income
               content:
                  application/json:
                     schema:
                        $ref: '#/components/schemas/Income'
            404:
               $ref: '#/components/responses/NotFound'
            422:
               $ref: '#/components/responses/InvalidData'
            default:
               $ref: '#/components/responses/UnexpectedError'
   /incomes/{incomeId}:
      get:
         tags:
            - incomes
         summary: Info for a specific Income
         operationId: findIncomeById
         parameters:
            - name: incomeId
              in: path
              required: true
              description: The id of the income to retrieve
              schema:
                 type: string
         responses:
            200:
               description: Expected response to a valid request
               content:
                  application/json:
                     schema:
                        $ref: '#/components/schemas/Income'
            404:
               $ref: '#/components/responses/NotFound'
            422:
               $ref: '#/components/responses/InvalidData'
            default:
               $ref: '#/components/responses/UnexpectedError'
      delete:
         tags:
            - incomes
         summary: Delete an Income
         description: Delete an existing Income from the budget
         operationId: deleteIncome
         parameters:
            - name: incomeId
              in: path
              description: Income id to delete
              required: true
              schema:
                 type: string
                 format: uuid
         responses:
            204:
               description: Income successfully deleted
               content: {}
            404:
               $ref: '#/components/responses/NotFound'
            422:
               $ref: '#/components/responses/InvalidData'
            default:
               $ref: '#/components/responses/UnexpectedError'
   /incomes/findByDate:
      get:
         tags:
            - incomes
         summary: Find income by specific date
         operationId: findIncomeByDate
         parameters:
            - in: query
              name: date
              description: Date the income was created
              required: true
              schema:
                 type: string
         responses:
            200:
               description: successful operation
               content:
                  application/json:
                     schema:
                        $ref: '#/components/schemas/Income'
            404:
               $ref: '#/components/responses/NotFound'
            422:
               $ref: '#/components/responses/InvalidData'
            default:
               $ref: '#/components/responses/UnexpectedError'
components:
   schemas:
      Income:
         type: object
         description: Income information
         required:
            - id
            - name
         properties:
            id:
               type: string
               format: uuid
               example: ""
            name:
               type: string
               minLength: 1
               example: "Pentagon paycheck"
            plannedAmount:
               type: number
               format: double
               example: 4000.00
            receivedAmount:
               type: number
               format: double
               example: 3900.00
      PayPeriodType:
         type: object
         description: Pay period type information
         required:
            - id
            - type
         properties:
            id:
               type: string
               format: uuid
               example: ""
            type:
               type: string
               example: "monthly"
               enum:
                  - weekly
                  - monthly
      Error:
         description: Error message sent back
         type: object
         required:
            - code
            - message
         properties:
            code:
               type: string
               minLength: 1
            message:
               type: string
               minLength: 1
            description:
               type: string
               minLength: 1
      FieldValidationError:
         type: object
         description: Field validation error
         required:
            - code
            - field
            - message
         properties:
            code:
               type: integer
               format: int32
            field:
               type: string
               minLength: 1
            message:
               type: string
               minLength: 1
      FieldValidationErrors:
         description: A list of field validation errors
         type: object
         required:
            - code
            - message
            - errors
         properties:
            code:
               type: integer
               format: int32
            message:
               type: string
               minLength: 1
            errors:
               type: array
               items:
                  $ref: '#/components/schemas/FieldValidationError'
   parameters:
      limitParam:
         name: limit
         in: query
         description: Max records to return
         required: false
         schema:
           type: integer
           format: int32
           default: 0
   responses:
      UnexpectedError:
         description: Unexpected error
         content:
            application/json:
               schema:
                  $ref: '#/components/schemas/Error'
      NotFound:
         description: The specified resource was not found
         content:
            application/json:
               schema:
                  $ref: '#/components/schemas/Error'
      InvalidData:
         description: Input provided is invalid
         content:
            application/json:
               schema:
                  $ref: '#/components/schemas/FieldValidationError'